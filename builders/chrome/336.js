"use strict";(self.webpackChunkpaycio_wallet=self.webpackChunkpaycio_wallet||[]).push([[336],{18336:function(r,t,e){e.d(t,{Ei:function(){return m},Of:function(){return o},estimateGas:function(){return i},fh:function(){return _},get24hPriceChange:function(){return w},getGasPrice:function(){return c},getRealBalance:function(){return s},getTransactionCount:function(){return h},h9:function(){return u},nw:function(){return l},r1:function(){return a},sendSignedTransaction:function(){return E},signTransaction:function(){return p}});const n=()=>"undefined"!=typeof window?{INFURA_PROJECT_ID:"ed5ebbc74c634fb3a8010a172c834989",ALCHEMY_API_KEY:"CfyYH4G3iTZbli3r0Ehs-",ETHERSCAN_API_KEY:"BHHF8ZRY9EUVY2TSBKGPVEKVKKB9AHVC4K",COINGECKO_API_KEY:"your_coingecko_api_key_here",COINMARKETCAP_API_KEY:"your_coinmarketcap_api_key_here",OPENSEA_API_KEY:"42407c6c5775459a9c279d5bc4cd36fd",ALCHEMY_NFT_API_KEY:"your_alchemy_nft_api_key_here",DEFI_PULSE_API_KEY:"your_defi_pulse_api_key_here",ENS_RPC_URL:"https://mainnet.infura.io/v3/ed5ebbc74c634fb3a8010a172c834989",IPFS_GATEWAY:"https://ipfs.io/ipfs/",CUSTOM_RPC_ENDPOINTS:{},SECURITY:{AUTO_LOCK_TIMEOUT:15,MAX_FAILED_ATTEMPTS:5,SESSION_TIMEOUT:30,REQUIRE_PASSWORD:!0,ENABLE_BIOMETRIC:!1},FEATURES:{ENABLE_NFT_SUPPORT:!0,ENABLE_DEFI_INTEGRATION:!0,ENABLE_PORTFOLIO_TRACKING:!0,ENABLE_HARDWARE_WALLET:!0,ENABLE_WALLET_CONNECT:!0},NETWORKS:{ethereum:{rpcUrl:"https://mainnet.infura.io/v3/ed5ebbc74c634fb3a8010a172c834989",chainId:"0x1",explorerUrl:"https://etherscan.io",symbol:"ETH",decimals:18,isEnabled:!0},bsc:{rpcUrl:"https://bsc-dataseed.binance.org",chainId:"0x38",explorerUrl:"https://bscscan.com",symbol:"BNB",decimals:18,isEnabled:!0},polygon:{rpcUrl:"https://polygon-rpc.com",chainId:"0x89",explorerUrl:"https://polygonscan.com",symbol:"MATIC",decimals:18,isEnabled:!0},avalanche:{rpcUrl:"https://api.avax.network/ext/bc/C/rpc",chainId:"0xa86a",explorerUrl:"https://snowtrace.io",symbol:"AVAX",decimals:18,isEnabled:!0},arbitrum:{rpcUrl:"https://arb1.arbitrum.io/rpc",chainId:"0xa4b1",explorerUrl:"https://arbiscan.io",symbol:"ETH",decimals:18,isEnabled:!0},optimism:{rpcUrl:"https://mainnet.optimism.io",chainId:"0xa",explorerUrl:"https://optimistic.etherscan.io",symbol:"ETH",decimals:18,isEnabled:!0}}}:{INFURA_PROJECT_ID:"",ETHERSCAN_API_KEY:"",ALCHEMY_API_KEY:"",ALCHEMY_NFT_API_KEY:"",ENS_RPC_URL:"",COINGECKO_API_KEY:"",OPENSEA_API_KEY:"",COINMARKETCAP_API_KEY:"",DEFI_PULSE_API_KEY:"",IPFS_GATEWAY:""},o={ethereum:{name:"Ethereum",symbol:"ETH",chainId:"1",rpcUrl:`https://mainnet.infura.io/v3/${n().INFURA_PROJECT_ID}`,explorerUrl:"https://etherscan.io",apiKey:n().ETHERSCAN_API_KEY,nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18}},bsc:{name:"Binance Smart Chain",symbol:"BNB",chainId:"56",rpcUrl:"https://bsc-dataseed1.binance.org",explorerUrl:"https://bscscan.com",apiKey:n().ETHERSCAN_API_KEY,nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18}},polygon:{name:"Polygon",symbol:"MATIC",chainId:"137",rpcUrl:"https://polygon-rpc.com",explorerUrl:"https://polygonscan.com",apiKey:n().ETHERSCAN_API_KEY,nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18}},avalanche:{name:"Avalanche",symbol:"AVAX",chainId:"43114",rpcUrl:"https://api.avax.network/ext/bc/C/rpc",explorerUrl:"https://snowtrace.io",apiKey:"",nativeCurrency:{name:"Avalanche",symbol:"AVAX",decimals:18}},arbitrum:{name:"Arbitrum One",symbol:"ETH",chainId:"42161",rpcUrl:"https://arb1.arbitrum.io/rpc",explorerUrl:"https://arbiscan.io",apiKey:"",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18}},optimism:{name:"Optimism",symbol:"ETH",chainId:"10",rpcUrl:"https://mainnet.optimism.io",explorerUrl:"https://optimistic.etherscan.io",apiKey:"",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18}}};async function a(r,t){try{const e=o[t];if(!e)throw new Error(`Unsupported network: ${t}`);const n=await fetch(e.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",method:"eth_getBalance",params:[r,"latest"],id:1})});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const a=await n.json();if(a.error)throw new Error(a.error.message);return a.result||"0x0"}catch(r){return"0x0"}}async function s(r,t){return a(r,t)}async function c(r){try{const t=o[r];if(!t)throw new Error(`Unsupported network: ${r}`);const e=await fetch(t.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",method:"eth_gasPrice",params:[],id:1})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const n=await e.json();if(n.error)throw new Error(n.error.message);return n.result||"0x0"}catch(r){return"0x0"}}async function i(r,t,e,n="0x",a){try{const s=o[a];if(!s)throw new Error(`Unsupported network: ${a}`);const c=await fetch(s.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",method:"eth_estimateGas",params:[{from:r,to:t,value:e,data:n}],id:1})});if(!c.ok)throw new Error(`HTTP error! status: ${c.status}`);const i=await c.json();if(i.error)throw new Error(i.error.message);return i.result||"0x0"}catch(r){return"0x0"}}async function h(r,t){try{const e=o[t];if(!e)throw new Error(`Unsupported network: ${t}`);const n=await fetch(e.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",method:"eth_getTransactionCount",params:[r,"latest"],id:1})});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const a=await n.json();if(a.error)throw new Error(a.error.message);return a.result||"0x0"}catch(r){return"0x0"}}async function p(r,t,n){try{const{ethers:o}=await e.e(96).then(e.bind(e,57908)),a=new o.Wallet(t),s={to:r.to,value:r.value||"0x0",data:r.data||"0x",gasLimit:r.gasLimit||"0x5208",gasPrice:r.gasPrice||await c(n),nonce:r.nonce||await h(a.address,n)};return await a.signTransaction(s)}catch(r){throw r}}async function E(r,t){try{const e=o[t];if(!e)throw new Error(`Unsupported network: ${t}`);const n=await fetch(e.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",method:"eth_sendRawTransaction",params:[r],id:1})});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const a=await n.json();if(a.error)throw new Error(a.error.message);return a.result}catch(r){throw r}}async function u(r,t){try{const e=n().ETHERSCAN_API_KEY;if(!e)throw new Error("Etherscan API key required for transaction data");const o={ethereum:"1",bsc:"56",polygon:"137",avalanche:"43114",arbitrum:"42161",optimism:"10"}[t];if(!o)throw new Error(`Unsupported network for Etherscan V2 API: ${t}`);const a=`${"https://api.etherscan.io/api/v2"}/transactions/${r}?chainid=${o}&apikey=${e}`,s=await fetch(a);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const c=await s.json();if("1"!==c.status)throw new Error(`API error: ${c.message}`);return c.result}catch(r){return null}}async function l(r,t,e=1,o=20){try{const a=n().ETHERSCAN_API_KEY;if(!a)throw new Error("Etherscan API key required for transaction history");const s={ethereum:"1",bsc:"56",polygon:"137",avalanche:"43114",arbitrum:"42161",optimism:"10"}[t];if(!s)throw new Error(`Unsupported network for Etherscan V2 API: ${t}`);const c=`${"https://api.etherscan.io/api/v2"}/transactions?address=${r}&chainid=${s}&page=${e}&offset=${o}&apikey=${a}`,i=await fetch(c);if(!i.ok)throw new Error(`HTTP error! status: ${i.status}`);const h=await i.json();if("1"!==h.status)throw new Error(`API error: ${h.message}`);return h.result||[]}catch(r){return[]}}async function _(r,t,e){try{const o=n().ETHERSCAN_API_KEY;if(!o)throw new Error("Etherscan API key required for token transactions");const a={ethereum:"1",bsc:"56",polygon:"137",avalanche:"43114",arbitrum:"42161",optimism:"10"}[t];if(!a)throw new Error(`Unsupported network for Etherscan V2 API: ${t}`);let s=`${"https://api.etherscan.io/api/v2"}/tokens/transactions?address=${r}&chainid=${a}&apikey=${o}`;e&&(s+=`&contractaddress=${e}`);const c=await fetch(s);if(!c.ok)throw new Error(`HTTP error! status: ${c.status}`);const i=await c.json();if("1"!==i.status)throw new Error(`API error: ${i.message}`);return i.result||[]}catch(r){return[]}}const m=471!=e.j?async function(r){try{const t=n().COINGECKO_API_KEY;if(!t)throw new Error("CoinGecko API key required for token pricing");const e=`https://api.coingecko.com/api/v3/simple/price?ids=${r.join(",")}&vs_currencies=usd&x_cg_demo_api_key=${t}`,o=await fetch(e);if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const a=await o.json();if(a.error)throw new Error(a.error);const s={};return r.forEach(r=>{s[r]=a[r]?.usd||0}),s}catch(r){return{}}}:null;async function w(r){try{const t=n().COINGECKO_API_KEY;if(!t)throw new Error("CoinGecko API key required for price change data");const e=`https://api.coingecko.com/api/v3/coins/${r}/market_chart?vs_currency=usd&days=1&x_cg_demo_api_key=${t}`,o=await fetch(e);if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const a=await o.json();if(a.error)throw new Error(a.error);const s=a.prices;if(s&&s.length>=2){const r=s[s.length-1][1],t=s[0][1],e=r-t;return{price_change_24h:e,price_change_percentage_24h:e/t*100,current_price:r}}return{price_change_24h:0,price_change_percentage_24h:0,current_price:0}}catch(r){return{price_change_24h:0,price_change_percentage_24h:0,current_price:0}}}}}]);