"use strict";(self.webpackChunkpaycio_wallet=self.webpackChunkpaycio_wallet||[]).push([[917],{68917:function(e,t,r){r.d(t,{hardwareWalletManager:function(){return a}});const a=new class{constructor(){this.connectedWallets=new Map,this.isSupported=!1,this.transport=null,this.ethApp=null,this.trezorConnect=null,this.deviceType=null,this.connected=!1,this.derivationPath="m/44'/60'/0'/0/0",this.checkSupport()}async checkSupport(){try{this.isSupported="usb"in navigator&&"getDevices"in navigator.usb,this.isSupported}catch(e){this.isSupported=!1}}async connectToDevice(e){try{if("ledger"===e)await this.connectLedger();else{if("trezor"!==e)throw new Error("Unsupported device type");await this.connectTrezor()}}catch(e){throw e}}async connectLedger(){try{const e=await r.e(96).then(r.bind(r,58601)),t=await Promise.all([r.e(96),r.e(119)]).then(r.bind(r,52389)),a=await e.default.create(),n=new t.default(a);if(!await n.getAppConfiguration())throw new Error("Ledger device not responding");this.transport=a,this.ethApp=n,this.deviceType="ledger",this.connected=!0}catch(e){throw new Error("Failed to connect to Ledger device. Please ensure it is connected and unlocked.")}}async connectTrezor(){try{const e=await r.e(96).then(r.t.bind(r,39319,23));await e.default.init({manifest:{appName:"SOW Wallet",appUrl:"https://github.com/segunemma2003/sow-wallet.git",email:"support@paycio-wallet.com"}});const t=await e.default.ethereumGetAddress({path:this.derivationPath});if(!t.success){throw new Error(t.error||"Trezor connection failed")}this.trezorConnect=e.default,this.deviceType="trezor",this.connected=!0}catch(e){throw new Error("Failed to connect to Trezor device. Please ensure it is connected and unlocked.")}}async deriveAddressFromPath(e,t){try{if("ledger"===t)return await this.deriveAddressFromPathLedger(e);if("trezor"===t)return await this.deriveAddressFromPathTrezor(e);throw new Error("Unsupported device type")}catch(e){throw e}}async deriveAddressFromPathLedger(e){try{if(!this.ethApp)throw new Error("Ledger not connected");return(await this.ethApp.getAddress(e)).address}catch(e){throw e}}async deriveAddressFromPathTrezor(e){try{if(!this.trezorConnect)throw new Error("Trezor not connected");const t=await this.trezorConnect.ethereumGetAddress({path:e});if(!t.success)throw new Error(t.payload.error||"Trezor address derivation failed");return t.payload.address}catch(e){throw e}}async hashString(e){const t=(new TextEncoder).encode(e),r=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(r)).map(e=>e.toString(16).padStart(2,"0")).join("")}async signTransaction(e){try{if("ledger"===this.deviceType)return await this.signTransactionLedger(e);if("trezor"===this.deviceType)return await this.signTransactionTrezor(e);throw new Error("No hardware wallet connected")}catch(e){throw e}}async signTransactionLedger(e){try{const{ethers:t}=await r.e(96).then(r.bind(r,57908)),a=await r.e(96).then(r.bind(r,58601)),n=await Promise.all([r.e(96),r.e(119)]).then(r.bind(r,52389)),i=await a.default.create(),o=new n.default(i),s=t.Transaction.from(e).serialized;await o.signTransaction(this.derivationPath,s.substring(2));return t.Transaction.from(e).serialized}catch(e){throw e}}async signTransactionTrezor(e){try{const{ethers:t}=await r.e(96).then(r.bind(r,57908)),a=await r.e(96).then(r.t.bind(r,39319,23));await a.default.init({manifest:{appName:"SOW Wallet",appUrl:"https://github.com/segunemma2003/sow-wallet.git",email:"support@paycio-wallet.com"}});const n=await a.default.ethereumSignTransaction({path:this.derivationPath,transaction:{to:e.to,value:e.value,data:e.data||"0x",chainId:e.chainId||1,nonce:e.nonce,gasLimit:e.gasLimit,gasPrice:e.gasPrice}});if(!n.success){const e=n;throw new Error(e.payload?.error||"Trezor signing failed")}return t.Transaction.from(e).serialized}catch(e){throw e}}async signMessage(e){try{if("ledger"===this.deviceType)return await this.signMessageLedger(e);if("trezor"===this.deviceType)return await this.signMessageTrezor(e);throw new Error("No hardware wallet connected")}catch(e){throw e}}async signMessageLedger(e){try{const t=await r.e(96).then(r.bind(r,58601)),a=await Promise.all([r.e(96),r.e(119)]).then(r.bind(r,52389)),n=await t.default.create(),i=new a.default(n),o=await i.signPersonalMessage(this.derivationPath,Buffer.from(e).toString("hex")),s=o.r,c=o.s;return`0x${s}${c}${o.v.toString(16).padStart(2,"0")}`}catch(e){throw e}}async signMessageTrezor(e){try{const t=await r.e(96).then(r.t.bind(r,39319,23));await t.default.init({manifest:{appName:"PayCio Wallet",appUrl:"https://github.com/segunemma2003/sow-wallet.git",email:"support@paycio-wallet.com"}});const a=await t.default.ethereumSignMessage({path:this.derivationPath,message:e});if(!a.success){const e=a;throw new Error(e.payload?.error||"Trezor message signing failed")}return a.payload.signature}catch(e){throw e}}async simulateDeviceSigning(e){return new Promise((e,t)=>{setTimeout(()=>{Math.random()>.05?e():t(new Error("User rejected signing on device"))},2e3)})}getConnectedWallets(){return Array.from(this.connectedWallets.values())}getWallet(e){return this.connectedWallets.get(e)}async disconnectWallet(e){const t=this.connectedWallets.get(e);t&&(t.connected=!1,this.connectedWallets.delete(e))}async disconnectAllWallets(){this.connectedWallets.clear()}isHardwareWalletSupported(){return this.isSupported}async getWalletAddresses(e){const t=this.connectedWallets.get(e);if(!t)throw new Error("Wallet not found");return t.addresses}async getAccountBalance(e,t){try{const{getRealBalance:a}=await Promise.resolve().then(r.bind(r,18336));return await a(e,t)}catch(e){return"0.0"}}async exportPublicKey(e,t){const r=this.connectedWallets.get(e);if(!r||!r.connected)throw new Error("Hardware wallet not connected");try{if("ledger"===this.deviceType)return await this.exportPublicKeyLedger(t);if("trezor"===this.deviceType)return await this.exportPublicKeyTrezor(t);throw new Error("Unsupported device type")}catch(e){throw new Error("Failed to export public key")}}async exportPublicKeyLedger(e){try{if(!this.ethApp)throw new Error("Ledger not connected");return(await this.ethApp.getAddress(e)).publicKey}catch(e){throw e}}async exportPublicKeyTrezor(e){try{if(!this.trezorConnect)throw new Error("Trezor not connected");const t=await this.trezorConnect.ethereumGetAddress({path:e});if(!t.success)throw new Error(t.payload.error||"Trezor public key export failed");return t.payload.address}catch(e){throw e}}async verifyConnection(e){const t=this.connectedWallets.get(e);if(!t)return!1;try{return t.connected}catch(e){return!1}}async getDeviceInfo(){try{if("ledger"===this.deviceType)return await this.getDeviceInfoLedger();if("trezor"===this.deviceType)return await this.getDeviceInfoTrezor();throw new Error("No hardware wallet connected")}catch(e){throw e}}async getDeviceInfoLedger(){try{const e=await r.e(96).then(r.bind(r,58601)),t=await Promise.all([r.e(96),r.e(119)]).then(r.bind(r,52389)),a=await e.default.create(),n=new t.default(a);return{name:"Ledger Nano S/X",version:(await n.getAppConfiguration()).version,connected:!0,deviceType:"ledger"}}catch(e){throw e}}async getDeviceInfoTrezor(){try{const e=await r.e(96).then(r.t.bind(r,39319,23));await e.default.init({manifest:{appName:"SOW Wallet",appUrl:"https://github.com/segunemma2003/sow-wallet.git",email:"support@paycio-wallet.com"}});const t=await e.default.ethereumGetAddress({path:this.derivationPath});if(!t.success){const e=t;throw new Error(e.payload?.error||"Trezor device info failed")}return{name:"Trezor Model T",version:"1.0.0",connected:!0,deviceType:"trezor"}}catch(e){throw e}}async connectHardwareWallet(e){try{await this.connectToDevice(e),this.deviceType=e,this.connected=!0}catch(e){throw e}}async disconnectHardwareWallet(){try{"ledger"===this.deviceType&&this.transport&&await this.transport.close(),this.transport=null,this.ethApp=null,this.trezorConnect=null,this.deviceType=null,this.connected=!1}catch(e){throw e}}async getHardwareWalletAddresses(e){try{if(!this.connected||!this.deviceType)throw new Error("Hardware wallet not connected");const t=[];for(let r=0;r<5;r++){const a=e.replace("/0",`/${r}`),n=await this.deriveAddressFromPath(a,this.deviceType);t.push(n)}return t}catch(e){throw e}}}}}]);