"use strict";(self.webpackChunkpaycio_wallet=self.webpackChunkpaycio_wallet||[]).push([[463],{95463:function(t,e,a){a.d(e,{NFTManager:function(){return n}});var o=a(8051),r=a(13269),s=a(18336);class n{constructor(){this.nfts=[],this.collections=[],this.loadNFTData()}async loadNFTData(){try{chrome.storage.local.get(["nfts","nftCollections"],t=>{t.nfts&&(this.nfts=t.nfts),t.nftCollections&&(this.collections=t.nftCollections)})}catch(t){}}async saveNFTData(){try{chrome.storage.local.set({nfts:this.nfts,nftCollections:this.collections})}catch(t){}}async getWalletFromStorage(){return new Promise(t=>{chrome.storage.local.get(["wallet"],e=>{t(e.wallet||null)})})}async importNFTs(t,e){try{const a=s.Of[e];if(!a)throw new Error(`Unsupported network: ${e}`);const o=this.getConfig(),r=[];if("ethereum"===e){const e=await this.fetchFromOpenSea(t,o.OPENSEA_API_KEY);r.push(...e)}if(a.rpcUrl){const e=await this.fetchFromAlchemy(t,a.rpcUrl,o.ALCHEMY_API_KEY);r.push(...e)}if("polygon"===e){const e=await this.fetchFromPolygonScan(t,o.POLYGONSCAN_API_KEY);r.push(...e)}return this.nfts.push(...r),await this.saveNFTData(),r}catch(t){throw t}}async fetchFromOpenSea(t,e){try{const a="https://api.opensea.io/api/v1",o=e?`${a}/assets?owner=${t}&order_direction=desc&offset=0&limit=50&X-API-KEY=${e}`:`${a}/assets?owner=${t}&order_direction=desc&offset=0&limit=50`,r=await fetch(o);if(!r.ok)throw new Error(`OpenSea API error: ${r.status}`);return(await r.json()).assets.map(e=>({id:`${e.asset_contract.address}-${e.token_id}`,tokenId:e.token_id,contractAddress:e.asset_contract.address,name:e.name||`${e.asset_contract.name} #${e.token_id}`,description:e.description||"",imageUrl:e.image_url||e.image_thumbnail_url||"",metadata:e.traits||{},owner:t,network:"ethereum",collection:{name:e.asset_contract.name,symbol:e.asset_contract.symbol,description:e.asset_contract.description,imageUrl:e.asset_contract.image_url},attributes:e.traits?.map(t=>({trait_type:t.trait_type,value:t.value,display_type:t.display_type}))||[],lastUpdated:Date.now()}))}catch(t){return[]}}async fetchFromAlchemy(t,e,a){try{const o=`${e}/getNFTs/?owner=${t}`,r={"Content-Type":"application/json"};a&&(r.Authorization=`Bearer ${a}`);const s=await fetch(o,{headers:r});if(!s.ok)throw new Error(`Alchemy API error: ${s.status}`);return(await s.json()).ownedNfts.map(e=>({id:`${e.contract.address}-${e.id.tokenId}`,tokenId:e.id.tokenId,contractAddress:e.contract.address,name:e.title||`NFT #${e.id.tokenId}`,description:e.description||"",imageUrl:e.media?.[0]?.gateway||e.media?.[0]?.raw||"",metadata:e.metadata?.attributes||{},owner:t,network:"ethereum",collection:{name:e.contract.name,symbol:e.contract.symbol},attributes:e.metadata?.attributes?.map(t=>({trait_type:t.trait_type,value:t.value}))||[],lastUpdated:Date.now()}))}catch(t){return[]}}async fetchFromPolygonScan(t,e){try{const a="https://api.polygonscan.com/api",o=e?`${a}?module=account&action=tokennfttx&address=${t}&apikey=${e}`:`${a}?module=account&action=tokennfttx&address=${t}`,r=await fetch(o);if(!r.ok)throw new Error(`PolygonScan API error: ${r.status}`);const s=await r.json();if("1"!==s.status)throw new Error(`PolygonScan API error: ${s.message}`);const n=new Map;return s.result.forEach(e=>{const a=`${e.contractAddress}-${e.tokenID}`;e.to.toLowerCase()===t.toLowerCase()?n.set(a,e):e.from.toLowerCase()===t.toLowerCase()&&n.delete(a)}),Array.from(n.values()).map(e=>({id:`${e.contractAddress}-${e.tokenID}`,tokenId:e.tokenID,contractAddress:e.contractAddress,name:`NFT #${e.tokenID}`,description:"",imageUrl:"",metadata:{},owner:t,network:"polygon",collection:{name:e.tokenName||"Unknown Collection",symbol:e.tokenSymbol||"NFT"},lastUpdated:Date.now()}))}catch(t){return[]}}async getNFTMetadata(t,e,a){try{const n=s.Of[a];if(!n)throw new Error(`Unsupported network: ${a}`);const c=new o.FR(n.rpcUrl),i=["function tokenURI(uint256 tokenId) view returns (string)","function name() view returns (string)","function symbol() view returns (string)"],l=new r.NZ(t,i,c),d=await l.tokenURI(e),h=d.startsWith("http")?d:`https://ipfs.io/ipfs/${d.replace("ipfs://","")}`,p=await fetch(h);return await p.json()}catch(t){return null}}async refreshNFTs(){try{const t=await this.getWalletFromStorage();if(!t?.address)throw new Error("No wallet found");this.nfts=[];const e=["ethereum","polygon","bsc","avalanche"];for(const a of e)try{await this.importNFTs(t.address,a)}catch(t){}}catch(t){throw t}}getAllNFTs(){return this.nfts}getNFTs(){return this.nfts}getNFTsByNetwork(t){return this.nfts.filter(e=>e.network===t)}getNFTsByCollection(t){return this.nfts.filter(e=>e.contractAddress.toLowerCase()===t.toLowerCase())}getNFT(t){return this.nfts.find(e=>e.id===t)}getCollections(){return this.collections}getCollection(t){return this.collections.find(e=>e.contractAddress.toLowerCase()===t.toLowerCase())}getNFTStats(){const t=this.nfts.length,e={},a={};return this.nfts.forEach(t=>{e[t.network]=(e[t.network]||0)+1,a[t.collection.name]=(a[t.collection.name]||0)+1}),{total:t,byNetwork:e,byCollection:a,totalValue:0}}async clearNFTData(){this.nfts=[],this.collections=[],await this.saveNFTData()}getConfig(){return"undefined"!=typeof window?{INFURA_PROJECT_ID:"ed5ebbc74c634fb3a8010a172c834989",ALCHEMY_API_KEY:"CfyYH4G3iTZbli3r0Ehs-",ETHERSCAN_API_KEY:"BHHF8ZRY9EUVY2TSBKGPVEKVKKB9AHVC4K",COINGECKO_API_KEY:"your_coingecko_api_key_here",COINMARKETCAP_API_KEY:"your_coinmarketcap_api_key_here",OPENSEA_API_KEY:"42407c6c5775459a9c279d5bc4cd36fd",ALCHEMY_NFT_API_KEY:"your_alchemy_nft_api_key_here",DEFI_PULSE_API_KEY:"your_defi_pulse_api_key_here",ENS_RPC_URL:"https://mainnet.infura.io/v3/ed5ebbc74c634fb3a8010a172c834989",IPFS_GATEWAY:"https://ipfs.io/ipfs/",CUSTOM_RPC_ENDPOINTS:{},SECURITY:{AUTO_LOCK_TIMEOUT:15,MAX_FAILED_ATTEMPTS:5,SESSION_TIMEOUT:30,REQUIRE_PASSWORD:!0,ENABLE_BIOMETRIC:!1},FEATURES:{ENABLE_NFT_SUPPORT:!0,ENABLE_DEFI_INTEGRATION:!0,ENABLE_PORTFOLIO_TRACKING:!0,ENABLE_HARDWARE_WALLET:!0,ENABLE_WALLET_CONNECT:!0},NETWORKS:{ethereum:{rpcUrl:"https://mainnet.infura.io/v3/ed5ebbc74c634fb3a8010a172c834989",chainId:"0x1",explorerUrl:"https://etherscan.io",symbol:"ETH",decimals:18,isEnabled:!0},bsc:{rpcUrl:"https://bsc-dataseed.binance.org",chainId:"0x38",explorerUrl:"https://bscscan.com",symbol:"BNB",decimals:18,isEnabled:!0},polygon:{rpcUrl:"https://polygon-rpc.com",chainId:"0x89",explorerUrl:"https://polygonscan.com",symbol:"MATIC",decimals:18,isEnabled:!0},avalanche:{rpcUrl:"https://api.avax.network/ext/bc/C/rpc",chainId:"0xa86a",explorerUrl:"https://snowtrace.io",symbol:"AVAX",decimals:18,isEnabled:!0},arbitrum:{rpcUrl:"https://arb1.arbitrum.io/rpc",chainId:"0xa4b1",explorerUrl:"https://arbiscan.io",symbol:"ETH",decimals:18,isEnabled:!0},optimism:{rpcUrl:"https://mainnet.optimism.io",chainId:"0xa",explorerUrl:"https://optimistic.etherscan.io",symbol:"ETH",decimals:18,isEnabled:!0}}}:{OPENSEA_API_KEY:"",ALCHEMY_API_KEY:"",POLYGONSCAN_API_KEY:""}}}}}]);